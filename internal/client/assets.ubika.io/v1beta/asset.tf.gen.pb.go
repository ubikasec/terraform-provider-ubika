// Code generated by protoc-gen-api. DO NOT EDIT.
package v1beta

import (
	context "context"
	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	types "github.com/hashicorp/terraform-plugin-framework/types"
	basetypes "github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	v1beta "github.com/ubikasec/terraform-provider-ubika/internal/client/meta/v1beta"
)

type SecurityModeResourceModel struct {
}

// FromProto imports field values from protobuf message
func (m *SecurityModeResourceModel) FromProto(r *SecurityMode) (err error) {
	return nil
}

type SecurityModeResourceTFModel struct {
}

// ToProto converts the model to the corresponding protobuf struct
func (m *SecurityModeResourceTFModel) ToProto(ctx context.Context) (*SecurityMode, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &SecurityMode{}
	return r, nil
}

type ExceptionProfileSpec_RuleResourceModel struct {
	Name    string   `tfsdk:"name"`
	Filters []string `tfsdk:"filters"`
}

// FromProto imports field values from protobuf message
func (m *ExceptionProfileSpec_RuleResourceModel) FromProto(r *ExceptionProfileSpec_Rule) (err error) {
	m.Name = r.GetName()
	m.Filters = r.GetFilters()
	return nil
}

type ExceptionProfileSpecResourceModel struct {
	Rules []*ExceptionProfileSpec_RuleResourceModel `tfsdk:"rules"`
}

// FromProto imports field values from protobuf message
func (m *ExceptionProfileSpecResourceModel) FromProto(r *ExceptionProfileSpec) (err error) {
	if r.GetRules() != nil {
		m.Rules = make([]*ExceptionProfileSpec_RuleResourceModel, len(r.GetRules()))
		for k, v := range r.GetRules() {
			m.Rules[k] = &ExceptionProfileSpec_RuleResourceModel{}
			if err := m.Rules[k].FromProto(v); err != nil {
				return err
			}
		}
	}
	return nil
}

// defined message ExceptionProfileSpec_Rule
type ExceptionProfileSpec_RuleResourceTFModel struct {
	Name    types.String `tfsdk:"name"`
	Filters types.Set    `tfsdk:"filters"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *ExceptionProfileSpec_RuleResourceTFModel) ToProto(ctx context.Context) (*ExceptionProfileSpec_Rule, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &ExceptionProfileSpec_Rule{}
	if !m.Name.IsNull() && !m.Name.IsUnknown() {
		r.Name = m.Name.ValueString()
	}
	if diags := m.Filters.ElementsAs(ctx, &r.Filters, false); diags.HasError() {
		return r, diags
	}
	return r, nil
}

type ExceptionProfileSpecResourceTFModel struct {
	Rules types.Set `tfsdk:"rules"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *ExceptionProfileSpecResourceTFModel) ToProto(ctx context.Context) (*ExceptionProfileSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &ExceptionProfileSpec{}
	var rules []*ExceptionProfileSpec_RuleResourceTFModel
	if diags := m.Rules.ElementsAs(ctx, &rules, false); diags.HasError() {
		return r, diags
	}
	for _, v := range rules {
		if RulesTmp, diags := v.ToProto(ctx); diags.HasError() {
			return r, diags
		} else {
			r.Rules = append(r.Rules, RulesTmp)
		}
	}
	return r, nil
}

type ExceptionProfileResourceModel struct {
	Id       string                             `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel    `tfsdk:"metadata"`
	Spec     *ExceptionProfileSpecResourceModel `tfsdk:"spec"`
}

// FromProto imports field values from protobuf message
func (m *ExceptionProfileResourceModel) FromProto(r *ExceptionProfile) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &ExceptionProfileSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	return nil
}

type ExceptionProfileResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *ExceptionProfileResourceTFModel) ToProto(ctx context.Context) (*ExceptionProfile, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewExceptionProfile("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *ExceptionProfileSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	return r, nil
}

type APIModuleResourceModel struct {
	SecurityMode string `tfsdk:"security_mode"`
	Openapi      string `tfsdk:"openapi"`
}

// FromProto imports field values from protobuf message
func (m *APIModuleResourceModel) FromProto(r *APIModule) (err error) {
	m.SecurityMode = r.GetSecurityMode().String()
	m.Openapi = r.GetOpenapi()
	return nil
}

type APIModuleResourceTFModel struct {
	SecurityMode types.String `tfsdk:"security_mode"`
	Openapi      types.String `tfsdk:"openapi"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *APIModuleResourceTFModel) ToProto(ctx context.Context) (*APIModule, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &APIModule{}
	if !m.SecurityMode.IsNull() && !m.SecurityMode.IsUnknown() {
		r.SecurityMode.UnmarshalText([]byte(m.SecurityMode.ValueString()))
	}
	if !m.Openapi.IsNull() && !m.Openapi.IsUnknown() {
		r.Openapi = m.Openapi.ValueString()
	}
	return r, nil
}

type ApplicationModuleResourceModel struct {
	SecurityMode           string `tfsdk:"security_mode"`
	ExceptionProfile       string `tfsdk:"exception_profile"`
	CustomIcxConfiguration string `tfsdk:"custom_icx_configuration"`
}

// FromProto imports field values from protobuf message
func (m *ApplicationModuleResourceModel) FromProto(r *ApplicationModule) (err error) {
	m.SecurityMode = r.GetSecurityMode().String()
	m.ExceptionProfile = r.GetExceptionProfile()
	m.CustomIcxConfiguration = r.GetCustomIcxConfiguration()
	return nil
}

type ApplicationModuleResourceTFModel struct {
	SecurityMode           types.String `tfsdk:"security_mode"`
	ExceptionProfile       types.String `tfsdk:"exception_profile"`
	CustomIcxConfiguration types.String `tfsdk:"custom_icx_configuration"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *ApplicationModuleResourceTFModel) ToProto(ctx context.Context) (*ApplicationModule, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &ApplicationModule{}
	if !m.SecurityMode.IsNull() && !m.SecurityMode.IsUnknown() {
		r.SecurityMode.UnmarshalText([]byte(m.SecurityMode.ValueString()))
	}
	if !m.ExceptionProfile.IsNull() && !m.ExceptionProfile.IsUnknown() {
		r.ExceptionProfile = m.ExceptionProfile.ValueString()
	}
	if !m.CustomIcxConfiguration.IsNull() && !m.CustomIcxConfiguration.IsUnknown() {
		r.CustomIcxConfiguration = m.CustomIcxConfiguration.ValueString()
	}
	return r, nil
}

type WorkflowResourceModel struct {
	Id       string                          `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel `tfsdk:"metadata"`
	Spec     *WorkflowSpecResourceModel      `tfsdk:"spec"`
}

// FromProto imports field values from protobuf message
func (m *WorkflowResourceModel) FromProto(r *Workflow) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &WorkflowSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	return nil
}

type WorkflowResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *WorkflowResourceTFModel) ToProto(ctx context.Context) (*Workflow, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewWorkflow("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *WorkflowSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	return r, nil
}

type WorkflowSpecResourceModel struct {
	Source     string `tfsdk:"source"`
	Entrypoint string `tfsdk:"entrypoint"`
}

// FromProto imports field values from protobuf message
func (m *WorkflowSpecResourceModel) FromProto(r *WorkflowSpec) (err error) {
	m.Source = r.GetSource()
	m.Entrypoint = r.GetEntrypoint()
	return nil
}

type WorkflowSpecResourceTFModel struct {
	Source     types.String `tfsdk:"source"`
	Entrypoint types.String `tfsdk:"entrypoint"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *WorkflowSpecResourceTFModel) ToProto(ctx context.Context) (*WorkflowSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &WorkflowSpec{}
	if !m.Source.IsNull() && !m.Source.IsUnknown() {
		r.Source = m.Source.ValueString()
	}
	if !m.Entrypoint.IsNull() && !m.Entrypoint.IsUnknown() {
		r.Entrypoint = m.Entrypoint.ValueString()
	}
	return r, nil
}

// generateTerraformModel: skipping pseudo type CustomWkfModule_WorkflowParamsEntry
type CustomWkfModuleResourceModel struct {
	Workflow       string            `tfsdk:"workflow"`
	WorkflowParams map[string]string `tfsdk:"workflow_params"`
}

// FromProto imports field values from protobuf message
func (m *CustomWkfModuleResourceModel) FromProto(r *CustomWkfModule) (err error) {
	m.Workflow = r.GetWorkflow()
	// TODO(generateTerraformFromProtoField): need to handle type for field WorkflowParams of Kind() message
	return nil
}

// defined message CustomWkfModule_WorkflowParamsEntry
// TFSDK Model: skipping pseudo type CustomWkfModule_WorkflowParamsEntry
type CustomWkfModuleResourceTFModel struct {
	Workflow       types.String `tfsdk:"workflow"`
	WorkflowParams types.Map    `tfsdk:"workflow_params"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *CustomWkfModuleResourceTFModel) ToProto(ctx context.Context) (*CustomWkfModule, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &CustomWkfModule{}
	if !m.Workflow.IsNull() && !m.Workflow.IsUnknown() {
		r.Workflow = m.Workflow.ValueString()
	}
	// TODO(generateTFSDKToProtoField): need to handle type for field WorkflowParams of Kind() message
	return r, nil
}

type WebSocketSecurityModeResourceModel struct {
}

// FromProto imports field values from protobuf message
func (m *WebSocketSecurityModeResourceModel) FromProto(r *WebSocketSecurityMode) (err error) {
	return nil
}

type WebSocketSecurityModeResourceTFModel struct {
}

// ToProto converts the model to the corresponding protobuf struct
func (m *WebSocketSecurityModeResourceTFModel) ToProto(ctx context.Context) (*WebSocketSecurityMode, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &WebSocketSecurityMode{}
	return r, nil
}

type WebSocketModuleResourceModel struct {
	SecurityMode string `tfsdk:"security_mode"`
}

// FromProto imports field values from protobuf message
func (m *WebSocketModuleResourceModel) FromProto(r *WebSocketModule) (err error) {
	m.SecurityMode = r.GetSecurityMode().String()
	return nil
}

type WebSocketModuleResourceTFModel struct {
	SecurityMode types.String `tfsdk:"security_mode"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *WebSocketModuleResourceTFModel) ToProto(ctx context.Context) (*WebSocketModule, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &WebSocketModule{}
	if !m.SecurityMode.IsNull() && !m.SecurityMode.IsUnknown() {
		r.SecurityMode.UnmarshalText([]byte(m.SecurityMode.ValueString()))
	}
	return r, nil
}

type IPReputationThreatResourceModel struct {
}

// FromProto imports field values from protobuf message
func (m *IPReputationThreatResourceModel) FromProto(r *IPReputationThreat) (err error) {
	return nil
}

type IPReputationThreatResourceTFModel struct {
}

// ToProto converts the model to the corresponding protobuf struct
func (m *IPReputationThreatResourceTFModel) ToProto(ctx context.Context) (*IPReputationThreat, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &IPReputationThreat{}
	return r, nil
}

type IPReputationModuleResourceModel struct {
	SecurityMode string   `tfsdk:"security_mode"`
	Threats      []string `tfsdk:"threats"`
}

// FromProto imports field values from protobuf message
func (m *IPReputationModuleResourceModel) FromProto(r *IPReputationModule) (err error) {
	m.SecurityMode = r.GetSecurityMode().String()
	m.Threats = make([]string, len(r.GetThreats()))
	for k, v := range r.GetThreats() {
		m.Threats[k] = v.String()
	}
	return nil
}

type IPReputationModuleResourceTFModel struct {
	SecurityMode types.String `tfsdk:"security_mode"`
	Threats      types.Set    `tfsdk:"threats"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *IPReputationModuleResourceTFModel) ToProto(ctx context.Context) (*IPReputationModule, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &IPReputationModule{}
	if !m.SecurityMode.IsNull() && !m.SecurityMode.IsUnknown() {
		r.SecurityMode.UnmarshalText([]byte(m.SecurityMode.ValueString()))
	}
	// TODO(generateTFSDKToProtoField): need to handle list type for field Threats of Kind() enum
	return r, nil
}

type GeoIPModeResourceModel struct {
}

// FromProto imports field values from protobuf message
func (m *GeoIPModeResourceModel) FromProto(r *GeoIPMode) (err error) {
	return nil
}

type GeoIPModeResourceTFModel struct {
}

// ToProto converts the model to the corresponding protobuf struct
func (m *GeoIPModeResourceTFModel) ToProto(ctx context.Context) (*GeoIPMode, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &GeoIPMode{}
	return r, nil
}

type GeoIPModuleResourceModel struct {
	SecurityMode string   `tfsdk:"security_mode"`
	Countries    []string `tfsdk:"countries"`
	Mode         string   `tfsdk:"mode"`
}

// FromProto imports field values from protobuf message
func (m *GeoIPModuleResourceModel) FromProto(r *GeoIPModule) (err error) {
	m.SecurityMode = r.GetSecurityMode().String()
	m.Countries = r.GetCountries()
	m.Mode = r.GetMode().String()
	return nil
}

type GeoIPModuleResourceTFModel struct {
	SecurityMode types.String `tfsdk:"security_mode"`
	Countries    types.Set    `tfsdk:"countries"`
	Mode         types.String `tfsdk:"mode"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *GeoIPModuleResourceTFModel) ToProto(ctx context.Context) (*GeoIPModule, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &GeoIPModule{}
	if !m.SecurityMode.IsNull() && !m.SecurityMode.IsUnknown() {
		r.SecurityMode.UnmarshalText([]byte(m.SecurityMode.ValueString()))
	}
	if diags := m.Countries.ElementsAs(ctx, &r.Countries, false); diags.HasError() {
		return r, diags
	}
	if !m.Mode.IsNull() && !m.Mode.IsUnknown() {
		r.Mode.UnmarshalText([]byte(m.Mode.ValueString()))
	}
	return r, nil
}

type IPBlacklistModuleResourceModel struct {
	SecurityMode string `tfsdk:"security_mode"`
	IpBlacklist  string `tfsdk:"ip_blacklist"`
}

// FromProto imports field values from protobuf message
func (m *IPBlacklistModuleResourceModel) FromProto(r *IPBlacklistModule) (err error) {
	m.SecurityMode = r.GetSecurityMode().String()
	m.IpBlacklist = r.GetIpBlacklist()
	return nil
}

type IPBlacklistModuleResourceTFModel struct {
	SecurityMode types.String `tfsdk:"security_mode"`
	IpBlacklist  types.String `tfsdk:"ip_blacklist"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *IPBlacklistModuleResourceTFModel) ToProto(ctx context.Context) (*IPBlacklistModule, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &IPBlacklistModule{}
	if !m.SecurityMode.IsNull() && !m.SecurityMode.IsUnknown() {
		r.SecurityMode.UnmarshalText([]byte(m.SecurityMode.ValueString()))
	}
	if !m.IpBlacklist.IsNull() && !m.IpBlacklist.IsUnknown() {
		r.IpBlacklist = m.IpBlacklist.ValueString()
	}
	return r, nil
}

type AssetSpecResourceModel struct {
	Hostnames               []string                         `tfsdk:"hostnames"`
	BackendUrl              string                           `tfsdk:"backend_url"`
	TlsMode                 string                           `tfsdk:"tls_mode"`
	ApiModule               *APIModuleResourceModel          `tfsdk:"api_module"`
	ApplicationModule       *ApplicationModuleResourceModel  `tfsdk:"application_module"`
	WebSocketModule         *WebSocketModuleResourceModel    `tfsdk:"web_socket_module"`
	IpReputationModule      *IPReputationModuleResourceModel `tfsdk:"ip_reputation_module"`
	GeoIpModule             *GeoIPModuleResourceModel        `tfsdk:"geo_ip_module"`
	CustomWkfModule         *CustomWkfModuleResourceModel    `tfsdk:"custom_wkf_module"`
	IpBlacklistModule       *IPBlacklistModuleResourceModel  `tfsdk:"ip_blacklist_module"`
	TlsMaterial             string                           `tfsdk:"tls_material"`
	TlsConfiguration        string                           `tfsdk:"tls_configuration"`
	BlockingPage            string                           `tfsdk:"blocking_page"`
	DeploymentType          string                           `tfsdk:"deployment_type"`
	ExceptionProfile        string                           `tfsdk:"exception_profile"`
	UnavailablePage         string                           `tfsdk:"unavailable_page"`
	MaintenancePage         string                           `tfsdk:"maintenance_page"`
	MaintenanceEnabled      bool                             `tfsdk:"maintenance_enabled"`
	TrustedIpAddressHeader  string                           `tfsdk:"trusted_ip_address_header"`
	BackendCertificateCheck string                           `tfsdk:"backend_certificate_check"`
}

// FromProto imports field values from protobuf message
func (m *AssetSpecResourceModel) FromProto(r *AssetSpec) (err error) {
	m.Hostnames = r.GetHostnames()
	m.BackendUrl = r.GetBackendUrl()
	m.TlsMode = r.GetTlsMode().String()
	if r.GetApiModule() != nil {
		m.ApiModule = &APIModuleResourceModel{}
		if err = m.ApiModule.FromProto(r.GetApiModule()); err != nil {
			return err
		}
	}
	if r.GetApplicationModule() != nil {
		m.ApplicationModule = &ApplicationModuleResourceModel{}
		if err = m.ApplicationModule.FromProto(r.GetApplicationModule()); err != nil {
			return err
		}
	}
	if r.GetWebSocketModule() != nil {
		m.WebSocketModule = &WebSocketModuleResourceModel{}
		if err = m.WebSocketModule.FromProto(r.GetWebSocketModule()); err != nil {
			return err
		}
	}
	if r.GetIpReputationModule() != nil {
		m.IpReputationModule = &IPReputationModuleResourceModel{}
		if err = m.IpReputationModule.FromProto(r.GetIpReputationModule()); err != nil {
			return err
		}
	}
	if r.GetGeoIpModule() != nil {
		m.GeoIpModule = &GeoIPModuleResourceModel{}
		if err = m.GeoIpModule.FromProto(r.GetGeoIpModule()); err != nil {
			return err
		}
	}
	if r.GetCustomWkfModule() != nil {
		m.CustomWkfModule = &CustomWkfModuleResourceModel{}
		if err = m.CustomWkfModule.FromProto(r.GetCustomWkfModule()); err != nil {
			return err
		}
	}
	if r.GetIpBlacklistModule() != nil {
		m.IpBlacklistModule = &IPBlacklistModuleResourceModel{}
		if err = m.IpBlacklistModule.FromProto(r.GetIpBlacklistModule()); err != nil {
			return err
		}
	}
	m.TlsMaterial = r.GetTlsMaterial()
	m.TlsConfiguration = r.GetTlsConfiguration()
	m.BlockingPage = r.GetBlockingPage()
	m.DeploymentType = r.GetDeploymentType().String()
	m.ExceptionProfile = r.GetExceptionProfile()
	m.UnavailablePage = r.GetUnavailablePage()
	m.MaintenancePage = r.GetMaintenancePage()
	m.MaintenanceEnabled = r.GetMaintenanceEnabled()
	m.TrustedIpAddressHeader = r.GetTrustedIpAddressHeader()
	m.BackendCertificateCheck = r.GetBackendCertificateCheck().String()
	return nil
}

type AssetSpecResourceTFModel struct {
	Hostnames               types.Set    `tfsdk:"hostnames"`
	BackendUrl              types.String `tfsdk:"backend_url"`
	TlsMode                 types.String `tfsdk:"tls_mode"`
	ApiModule               types.Object `tfsdk:"api_module"`
	ApplicationModule       types.Object `tfsdk:"application_module"`
	WebSocketModule         types.Object `tfsdk:"web_socket_module"`
	IpReputationModule      types.Object `tfsdk:"ip_reputation_module"`
	GeoIpModule             types.Object `tfsdk:"geo_ip_module"`
	CustomWkfModule         types.Object `tfsdk:"custom_wkf_module"`
	IpBlacklistModule       types.Object `tfsdk:"ip_blacklist_module"`
	TlsMaterial             types.String `tfsdk:"tls_material"`
	TlsConfiguration        types.String `tfsdk:"tls_configuration"`
	BlockingPage            types.String `tfsdk:"blocking_page"`
	DeploymentType          types.String `tfsdk:"deployment_type"`
	ExceptionProfile        types.String `tfsdk:"exception_profile"`
	UnavailablePage         types.String `tfsdk:"unavailable_page"`
	MaintenancePage         types.String `tfsdk:"maintenance_page"`
	MaintenanceEnabled      types.Bool   `tfsdk:"maintenance_enabled"`
	TrustedIpAddressHeader  types.String `tfsdk:"trusted_ip_address_header"`
	BackendCertificateCheck types.String `tfsdk:"backend_certificate_check"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *AssetSpecResourceTFModel) ToProto(ctx context.Context) (*AssetSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &AssetSpec{}
	if diags := m.Hostnames.ElementsAs(ctx, &r.Hostnames, false); diags.HasError() {
		return r, diags
	}
	if !m.BackendUrl.IsNull() && !m.BackendUrl.IsUnknown() {
		r.BackendUrl = m.BackendUrl.ValueString()
	}
	if !m.TlsMode.IsNull() && !m.TlsMode.IsUnknown() {
		r.TlsMode.UnmarshalText([]byte(m.TlsMode.ValueString()))
	}
	var apiModule *APIModuleResourceTFModel
	if diags := m.ApiModule.As(ctx, &apiModule, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if apiModuleTmp, diags := apiModule.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.ApiModule = apiModuleTmp
	}
	var applicationModule *ApplicationModuleResourceTFModel
	if diags := m.ApplicationModule.As(ctx, &applicationModule, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if applicationModuleTmp, diags := applicationModule.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.ApplicationModule = applicationModuleTmp
	}
	var webSocketModule *WebSocketModuleResourceTFModel
	if diags := m.WebSocketModule.As(ctx, &webSocketModule, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if webSocketModuleTmp, diags := webSocketModule.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.WebSocketModule = webSocketModuleTmp
	}
	var ipReputationModule *IPReputationModuleResourceTFModel
	if diags := m.IpReputationModule.As(ctx, &ipReputationModule, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if ipReputationModuleTmp, diags := ipReputationModule.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.IpReputationModule = ipReputationModuleTmp
	}
	var geoIpModule *GeoIPModuleResourceTFModel
	if diags := m.GeoIpModule.As(ctx, &geoIpModule, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if geoIpModuleTmp, diags := geoIpModule.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.GeoIpModule = geoIpModuleTmp
	}
	var customWkfModule *CustomWkfModuleResourceTFModel
	if diags := m.CustomWkfModule.As(ctx, &customWkfModule, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if customWkfModuleTmp, diags := customWkfModule.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.CustomWkfModule = customWkfModuleTmp
	}
	var ipBlacklistModule *IPBlacklistModuleResourceTFModel
	if diags := m.IpBlacklistModule.As(ctx, &ipBlacklistModule, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if ipBlacklistModuleTmp, diags := ipBlacklistModule.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.IpBlacklistModule = ipBlacklistModuleTmp
	}
	if !m.TlsMaterial.IsNull() && !m.TlsMaterial.IsUnknown() {
		r.TlsMaterial = m.TlsMaterial.ValueString()
	}
	if !m.TlsConfiguration.IsNull() && !m.TlsConfiguration.IsUnknown() {
		r.TlsConfiguration = m.TlsConfiguration.ValueString()
	}
	if !m.BlockingPage.IsNull() && !m.BlockingPage.IsUnknown() {
		r.BlockingPage = m.BlockingPage.ValueString()
	}
	if !m.DeploymentType.IsNull() && !m.DeploymentType.IsUnknown() {
		r.DeploymentType.UnmarshalText([]byte(m.DeploymentType.ValueString()))
	}
	if !m.ExceptionProfile.IsNull() && !m.ExceptionProfile.IsUnknown() {
		r.ExceptionProfile = m.ExceptionProfile.ValueString()
	}
	if !m.UnavailablePage.IsNull() && !m.UnavailablePage.IsUnknown() {
		r.UnavailablePage = m.UnavailablePage.ValueString()
	}
	if !m.MaintenancePage.IsNull() && !m.MaintenancePage.IsUnknown() {
		r.MaintenancePage = m.MaintenancePage.ValueString()
	}
	if !m.MaintenanceEnabled.IsNull() && !m.MaintenanceEnabled.IsUnknown() {
		r.MaintenanceEnabled = m.MaintenanceEnabled.ValueBool()
	}
	if !m.TrustedIpAddressHeader.IsNull() && !m.TrustedIpAddressHeader.IsUnknown() {
		r.TrustedIpAddressHeader = m.TrustedIpAddressHeader.ValueString()
	}
	if !m.BackendCertificateCheck.IsNull() && !m.BackendCertificateCheck.IsUnknown() {
		r.BackendCertificateCheck.UnmarshalText([]byte(m.BackendCertificateCheck.ValueString()))
	}
	return r, nil
}

type BackendStateResourceModel struct {
}

// FromProto imports field values from protobuf message
func (m *BackendStateResourceModel) FromProto(r *BackendState) (err error) {
	return nil
}

type BackendStateResourceTFModel struct {
}

// ToProto converts the model to the corresponding protobuf struct
func (m *BackendStateResourceTFModel) ToProto(ctx context.Context) (*BackendState, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &BackendState{}
	return r, nil
}

type DeploymentTypeResourceModel struct {
}

// FromProto imports field values from protobuf message
func (m *DeploymentTypeResourceModel) FromProto(r *DeploymentType) (err error) {
	return nil
}

type DeploymentTypeResourceTFModel struct {
}

// ToProto converts the model to the corresponding protobuf struct
func (m *DeploymentTypeResourceTFModel) ToProto(ctx context.Context) (*DeploymentType, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &DeploymentType{}
	return r, nil
}

type BackendCertificateCheckResourceModel struct {
}

// FromProto imports field values from protobuf message
func (m *BackendCertificateCheckResourceModel) FromProto(r *BackendCertificateCheck) (err error) {
	return nil
}

type BackendCertificateCheckResourceTFModel struct {
}

// ToProto converts the model to the corresponding protobuf struct
func (m *BackendCertificateCheckResourceTFModel) ToProto(ctx context.Context) (*BackendCertificateCheck, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &BackendCertificateCheck{}
	return r, nil
}

type DnsStateResourceModel struct {
}

// FromProto imports field values from protobuf message
func (m *DnsStateResourceModel) FromProto(r *DnsState) (err error) {
	return nil
}

type DnsStateResourceTFModel struct {
}

// ToProto converts the model to the corresponding protobuf struct
func (m *DnsStateResourceTFModel) ToProto(ctx context.Context) (*DnsState, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &DnsState{}
	return r, nil
}

type AssetStateResourceModel struct {
	Backend             string   `tfsdk:"backend"`
	Dns                 string   `tfsdk:"dns"`
	RunningState        string   `tfsdk:"running_state"`
	RedirectedHostnames []string `tfsdk:"redirected_hostnames"`
}

// FromProto imports field values from protobuf message
func (m *AssetStateResourceModel) FromProto(r *AssetState) (err error) {
	m.Backend = r.GetBackend().String()
	m.Dns = r.GetDns().String()
	m.RunningState = r.GetRunningState().String()
	m.RedirectedHostnames = r.GetRedirectedHostnames()
	return nil
}

type AssetStateResourceTFModel struct {
	Backend             types.String `tfsdk:"backend"`
	Dns                 types.String `tfsdk:"dns"`
	RunningState        types.String `tfsdk:"running_state"`
	RedirectedHostnames types.Set    `tfsdk:"redirected_hostnames"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *AssetStateResourceTFModel) ToProto(ctx context.Context) (*AssetState, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &AssetState{}
	if !m.Backend.IsNull() && !m.Backend.IsUnknown() {
		r.Backend.UnmarshalText([]byte(m.Backend.ValueString()))
	}
	if !m.Dns.IsNull() && !m.Dns.IsUnknown() {
		r.Dns.UnmarshalText([]byte(m.Dns.ValueString()))
	}
	if !m.RunningState.IsNull() && !m.RunningState.IsUnknown() {
		r.RunningState.UnmarshalText([]byte(m.RunningState.ValueString()))
	}
	if diags := m.RedirectedHostnames.ElementsAs(ctx, &r.RedirectedHostnames, false); diags.HasError() {
		return r, diags
	}
	return r, nil
}

type RunningStateResourceModel struct {
}

// FromProto imports field values from protobuf message
func (m *RunningStateResourceModel) FromProto(r *RunningState) (err error) {
	return nil
}

type RunningStateResourceTFModel struct {
}

// ToProto converts the model to the corresponding protobuf struct
func (m *RunningStateResourceTFModel) ToProto(ctx context.Context) (*RunningState, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &RunningState{}
	return r, nil
}

type TLSModeResourceModel struct {
}

// FromProto imports field values from protobuf message
func (m *TLSModeResourceModel) FromProto(r *TLSMode) (err error) {
	return nil
}

type TLSModeResourceTFModel struct {
}

// ToProto converts the model to the corresponding protobuf struct
func (m *TLSModeResourceTFModel) ToProto(ctx context.Context) (*TLSMode, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &TLSMode{}
	return r, nil
}

type AssetTlsStateResourceModel struct {
	BeginsOn  string `tfsdk:"begins_on"`
	ExpiresOn string `tfsdk:"expires_on"`
	Mode      string `tfsdk:"mode"`
}

// FromProto imports field values from protobuf message
func (m *AssetTlsStateResourceModel) FromProto(r *AssetTlsState) (err error) {
	m.BeginsOn = r.GetBeginsOn()
	m.ExpiresOn = r.GetExpiresOn()
	m.Mode = r.GetMode().String()
	return nil
}

type AssetTlsStateResourceTFModel struct {
	BeginsOn  types.String `tfsdk:"begins_on"`
	ExpiresOn types.String `tfsdk:"expires_on"`
	Mode      types.String `tfsdk:"mode"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *AssetTlsStateResourceTFModel) ToProto(ctx context.Context) (*AssetTlsState, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &AssetTlsState{}
	if !m.BeginsOn.IsNull() && !m.BeginsOn.IsUnknown() {
		r.BeginsOn = m.BeginsOn.ValueString()
	}
	if !m.ExpiresOn.IsNull() && !m.ExpiresOn.IsUnknown() {
		r.ExpiresOn = m.ExpiresOn.ValueString()
	}
	if !m.Mode.IsNull() && !m.Mode.IsUnknown() {
		r.Mode.UnmarshalText([]byte(m.Mode.ValueString()))
	}
	return r, nil
}

type AssetStatusResourceModel struct {
	ServiceAddress string                      `tfsdk:"service_address"`
	State          *AssetStateResourceModel    `tfsdk:"state"`
	Tls            *AssetTlsStateResourceModel `tfsdk:"tls"`
}

// FromProto imports field values from protobuf message
func (m *AssetStatusResourceModel) FromProto(r *AssetStatus) (err error) {
	m.ServiceAddress = r.GetServiceAddress()
	if r.GetState() != nil {
		m.State = &AssetStateResourceModel{}
		if err = m.State.FromProto(r.GetState()); err != nil {
			return err
		}
	}
	if r.GetTls() != nil {
		m.Tls = &AssetTlsStateResourceModel{}
		if err = m.Tls.FromProto(r.GetTls()); err != nil {
			return err
		}
	}
	return nil
}

type AssetStatusResourceTFModel struct {
	ServiceAddress types.String `tfsdk:"service_address"`
	State          types.Object `tfsdk:"state"`
	Tls            types.Object `tfsdk:"tls"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *AssetStatusResourceTFModel) ToProto(ctx context.Context) (*AssetStatus, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &AssetStatus{}
	if !m.ServiceAddress.IsNull() && !m.ServiceAddress.IsUnknown() {
		r.ServiceAddress = m.ServiceAddress.ValueString()
	}
	var state *AssetStateResourceTFModel
	if diags := m.State.As(ctx, &state, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if stateTmp, diags := state.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.State = stateTmp
	}
	var tls *AssetTlsStateResourceTFModel
	if diags := m.Tls.As(ctx, &tls, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if tlsTmp, diags := tls.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Tls = tlsTmp
	}
	return r, nil
}

type AssetResourceModel struct {
	Id       string                          `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel `tfsdk:"metadata"`
	Spec     *AssetSpecResourceModel         `tfsdk:"spec"`
	Status   *AssetStatusResourceModel       `tfsdk:"status"`
}

// FromProto imports field values from protobuf message
func (m *AssetResourceModel) FromProto(r *Asset) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &AssetSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	if r.GetStatus() != nil {
		m.Status = &AssetStatusResourceModel{}
		if err = m.Status.FromProto(r.GetStatus()); err != nil {
			return err
		}
	}
	return nil
}

type AssetResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
	Status   types.Object `tfsdk:"status"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *AssetResourceTFModel) ToProto(ctx context.Context) (*Asset, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewAsset("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *AssetSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	var status *AssetStatusResourceTFModel
	if diags := m.Status.As(ctx, &status, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if statusTmp, diags := status.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Status = statusTmp
	}
	return r, nil
}

type OpenAPISpecResourceModel struct {
	Source string `tfsdk:"source"`
}

// FromProto imports field values from protobuf message
func (m *OpenAPISpecResourceModel) FromProto(r *OpenAPISpec) (err error) {
	m.Source = r.GetSource()
	return nil
}

type OpenAPISpecResourceTFModel struct {
	Source types.String `tfsdk:"source"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *OpenAPISpecResourceTFModel) ToProto(ctx context.Context) (*OpenAPISpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &OpenAPISpec{}
	if !m.Source.IsNull() && !m.Source.IsUnknown() {
		r.Source = m.Source.ValueString()
	}
	return r, nil
}

type OpenAPIResourceModel struct {
	Id       string                          `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel `tfsdk:"metadata"`
	Spec     *OpenAPISpecResourceModel       `tfsdk:"spec"`
}

// FromProto imports field values from protobuf message
func (m *OpenAPIResourceModel) FromProto(r *OpenAPI) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &OpenAPISpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	return nil
}

type OpenAPIResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *OpenAPIResourceTFModel) ToProto(ctx context.Context) (*OpenAPI, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewOpenAPI("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *OpenAPISpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	return r, nil
}

type ErrorDocumentResourceModel struct {
	Id       string                          `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel `tfsdk:"metadata"`
	Spec     *ErrorDocumentSpecResourceModel `tfsdk:"spec"`
}

// FromProto imports field values from protobuf message
func (m *ErrorDocumentResourceModel) FromProto(r *ErrorDocument) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &ErrorDocumentSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	return nil
}

type ErrorDocumentResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *ErrorDocumentResourceTFModel) ToProto(ctx context.Context) (*ErrorDocument, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewErrorDocument("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *ErrorDocumentSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	return r, nil
}

type ErrorDocumentSpecResourceModel struct {
	Page        string `tfsdk:"page"`
	ContentType string `tfsdk:"content_type"`
}

// FromProto imports field values from protobuf message
func (m *ErrorDocumentSpecResourceModel) FromProto(r *ErrorDocumentSpec) (err error) {
	m.Page = r.GetPage()
	m.ContentType = r.GetContentType()
	return nil
}

type ErrorDocumentSpecResourceTFModel struct {
	Page        types.String `tfsdk:"page"`
	ContentType types.String `tfsdk:"content_type"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *ErrorDocumentSpecResourceTFModel) ToProto(ctx context.Context) (*ErrorDocumentSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &ErrorDocumentSpec{}
	if !m.Page.IsNull() && !m.Page.IsUnknown() {
		r.Page = m.Page.ValueString()
	}
	if !m.ContentType.IsNull() && !m.ContentType.IsUnknown() {
		r.ContentType = m.ContentType.ValueString()
	}
	return r, nil
}

type CSRStatusResourceModel struct {
	Asset     string   `tfsdk:"asset"`
	Hostnames []string `tfsdk:"hostnames"`
	Mode      string   `tfsdk:"mode"`
}

// FromProto imports field values from protobuf message
func (m *CSRStatusResourceModel) FromProto(r *CSRStatus) (err error) {
	m.Asset = r.GetAsset()
	m.Hostnames = r.GetHostnames()
	m.Mode = r.GetMode().String()
	return nil
}

type CSRStatusResourceTFModel struct {
	Asset     types.String `tfsdk:"asset"`
	Hostnames types.Set    `tfsdk:"hostnames"`
	Mode      types.String `tfsdk:"mode"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *CSRStatusResourceTFModel) ToProto(ctx context.Context) (*CSRStatus, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &CSRStatus{}
	if !m.Asset.IsNull() && !m.Asset.IsUnknown() {
		r.Asset = m.Asset.ValueString()
	}
	if diags := m.Hostnames.ElementsAs(ctx, &r.Hostnames, false); diags.HasError() {
		return r, diags
	}
	if !m.Mode.IsNull() && !m.Mode.IsUnknown() {
		r.Mode.UnmarshalText([]byte(m.Mode.ValueString()))
	}
	return r, nil
}

type CSRCreateSpecResourceModel struct {
	Asset string `tfsdk:"asset"`
}

// FromProto imports field values from protobuf message
func (m *CSRCreateSpecResourceModel) FromProto(r *CSRCreateSpec) (err error) {
	m.Asset = r.GetAsset()
	return nil
}

type CSRCreateSpecResourceTFModel struct {
	Asset types.String `tfsdk:"asset"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *CSRCreateSpecResourceTFModel) ToProto(ctx context.Context) (*CSRCreateSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &CSRCreateSpec{}
	if !m.Asset.IsNull() && !m.Asset.IsUnknown() {
		r.Asset = m.Asset.ValueString()
	}
	return r, nil
}

type CSRCreateResourceModel struct {
	Id       string                          `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel `tfsdk:"metadata"`
	Spec     *CSRCreateSpecResourceModel     `tfsdk:"spec"`
}

// FromProto imports field values from protobuf message
func (m *CSRCreateResourceModel) FromProto(r *CSRCreate) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &CSRCreateSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	return nil
}

type CSRCreateResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *CSRCreateResourceTFModel) ToProto(ctx context.Context) (*CSRCreate, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewCSRCreate("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *CSRCreateSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	return r, nil
}

type CSRSpecResourceModel struct {
	Csr string `tfsdk:"csr"`
}

// FromProto imports field values from protobuf message
func (m *CSRSpecResourceModel) FromProto(r *CSRSpec) (err error) {
	m.Csr = r.GetCsr()
	return nil
}

type CSRSpecResourceTFModel struct {
	Csr types.String `tfsdk:"csr"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *CSRSpecResourceTFModel) ToProto(ctx context.Context) (*CSRSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &CSRSpec{}
	if !m.Csr.IsNull() && !m.Csr.IsUnknown() {
		r.Csr = m.Csr.ValueString()
	}
	return r, nil
}

type CSRResourceModel struct {
	Id       string                          `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel `tfsdk:"metadata"`
	Status   *CSRStatusResourceModel         `tfsdk:"status"`
	Spec     *CSRSpecResourceModel           `tfsdk:"spec"`
}

// FromProto imports field values from protobuf message
func (m *CSRResourceModel) FromProto(r *CSR) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetStatus() != nil {
		m.Status = &CSRStatusResourceModel{}
		if err = m.Status.FromProto(r.GetStatus()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &CSRSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	return nil
}

type CSRResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Status   types.Object `tfsdk:"status"`
	Spec     types.Object `tfsdk:"spec"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *CSRResourceTFModel) ToProto(ctx context.Context) (*CSR, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewCSR("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var status *CSRStatusResourceTFModel
	if diags := m.Status.As(ctx, &status, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if statusTmp, diags := status.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Status = statusTmp
	}
	var spec *CSRSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	return r, nil
}

type CSRFullSpecResourceModel struct {
	Csr string `tfsdk:"csr"`
}

// FromProto imports field values from protobuf message
func (m *CSRFullSpecResourceModel) FromProto(r *CSRFullSpec) (err error) {
	m.Csr = r.GetCsr()
	// TODO(generateTerraformFromProtoField): need to handle type for field Key of Kind() bytes
	return nil
}

type CSRFullSpecResourceTFModel struct {
	Csr types.String `tfsdk:"csr"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *CSRFullSpecResourceTFModel) ToProto(ctx context.Context) (*CSRFullSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &CSRFullSpec{}
	if !m.Csr.IsNull() && !m.Csr.IsUnknown() {
		r.Csr = m.Csr.ValueString()
	}
	// TODO(generateTFSDKToProtoField): need to handle type for field Key of Kind() bytes
	return r, nil
}

type CSRFullResourceModel struct {
	Id       string                          `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel `tfsdk:"metadata"`
	Status   *CSRStatusResourceModel         `tfsdk:"status"`
	Spec     *CSRFullSpecResourceModel       `tfsdk:"spec"`
}

// FromProto imports field values from protobuf message
func (m *CSRFullResourceModel) FromProto(r *CSRFull) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetStatus() != nil {
		m.Status = &CSRStatusResourceModel{}
		if err = m.Status.FromProto(r.GetStatus()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &CSRFullSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	return nil
}

type CSRFullResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Status   types.Object `tfsdk:"status"`
	Spec     types.Object `tfsdk:"spec"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *CSRFullResourceTFModel) ToProto(ctx context.Context) (*CSRFull, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewCSRFull("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var status *CSRStatusResourceTFModel
	if diags := m.Status.As(ctx, &status, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if statusTmp, diags := status.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Status = statusTmp
	}
	var spec *CSRFullSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	return r, nil
}

type CSRCertificateSpecResourceModel struct {
	Csr         string `tfsdk:"csr"`
	Certificate string `tfsdk:"certificate"`
	Chain       string `tfsdk:"chain"`
}

// FromProto imports field values from protobuf message
func (m *CSRCertificateSpecResourceModel) FromProto(r *CSRCertificateSpec) (err error) {
	m.Csr = r.GetCsr()
	m.Certificate = r.GetCertificate()
	m.Chain = r.GetChain()
	return nil
}

type CSRCertificateSpecResourceTFModel struct {
	Csr         types.String `tfsdk:"csr"`
	Certificate types.String `tfsdk:"certificate"`
	Chain       types.String `tfsdk:"chain"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *CSRCertificateSpecResourceTFModel) ToProto(ctx context.Context) (*CSRCertificateSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &CSRCertificateSpec{}
	if !m.Csr.IsNull() && !m.Csr.IsUnknown() {
		r.Csr = m.Csr.ValueString()
	}
	if !m.Certificate.IsNull() && !m.Certificate.IsUnknown() {
		r.Certificate = m.Certificate.ValueString()
	}
	if !m.Chain.IsNull() && !m.Chain.IsUnknown() {
		r.Chain = m.Chain.ValueString()
	}
	return r, nil
}

type CSRCertificateResourceModel struct {
	Id       string                           `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel  `tfsdk:"metadata"`
	Spec     *CSRCertificateSpecResourceModel `tfsdk:"spec"`
}

// FromProto imports field values from protobuf message
func (m *CSRCertificateResourceModel) FromProto(r *CSRCertificate) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &CSRCertificateSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	return nil
}

type CSRCertificateResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *CSRCertificateResourceTFModel) ToProto(ctx context.Context) (*CSRCertificate, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewCSRCertificate("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *CSRCertificateSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	return r, nil
}

type TLSMaterialSpecResourceModel struct {
	Certificate string `tfsdk:"certificate"`
	Chain       string `tfsdk:"chain"`
}

// FromProto imports field values from protobuf message
func (m *TLSMaterialSpecResourceModel) FromProto(r *TLSMaterialSpec) (err error) {
	m.Certificate = r.GetCertificate()
	m.Chain = r.GetChain()
	return nil
}

type TLSMaterialSpecResourceTFModel struct {
	Certificate types.String `tfsdk:"certificate"`
	Chain       types.String `tfsdk:"chain"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *TLSMaterialSpecResourceTFModel) ToProto(ctx context.Context) (*TLSMaterialSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &TLSMaterialSpec{}
	if !m.Certificate.IsNull() && !m.Certificate.IsUnknown() {
		r.Certificate = m.Certificate.ValueString()
	}
	if !m.Chain.IsNull() && !m.Chain.IsUnknown() {
		r.Chain = m.Chain.ValueString()
	}
	return r, nil
}

type TLSMaterialResourceModel struct {
	Id       string                          `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel `tfsdk:"metadata"`
	Spec     *TLSMaterialSpecResourceModel   `tfsdk:"spec"`
	Status   *TLSMaterialStatusResourceModel `tfsdk:"status"`
}

// FromProto imports field values from protobuf message
func (m *TLSMaterialResourceModel) FromProto(r *TLSMaterial) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &TLSMaterialSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	if r.GetStatus() != nil {
		m.Status = &TLSMaterialStatusResourceModel{}
		if err = m.Status.FromProto(r.GetStatus()); err != nil {
			return err
		}
	}
	return nil
}

type TLSMaterialResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
	Status   types.Object `tfsdk:"status"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *TLSMaterialResourceTFModel) ToProto(ctx context.Context) (*TLSMaterial, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewTLSMaterial("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *TLSMaterialSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	var status *TLSMaterialStatusResourceTFModel
	if diags := m.Status.As(ctx, &status, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if statusTmp, diags := status.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Status = statusTmp
	}
	return r, nil
}

type TLSMaterialStatusResourceModel struct {
	Mode      string      `tfsdk:"mode"`
	Hostnames []string    `tfsdk:"hostnames"`
	NotBefore types.Int64 `tfsdk:"not_before"`
	NotAfter  types.Int64 `tfsdk:"not_after"`
	UsedBy    string      `tfsdk:"used_by"`
	Issuer_CN string      `tfsdk:"issuer_CN"`
	CN        string      `tfsdk:"CN"`
}

// FromProto imports field values from protobuf message
func (m *TLSMaterialStatusResourceModel) FromProto(r *TLSMaterialStatus) (err error) {
	m.Mode = r.GetMode().String()
	m.Hostnames = r.GetHostnames()
	if r.GetNotBefore() != nil {
	}
	if r.GetNotAfter() != nil {
	}
	m.UsedBy = r.GetUsedBy()
	m.Issuer_CN = r.GetIssuer_CN()
	m.CN = r.GetCN()
	return nil
}

type TLSMaterialStatusResourceTFModel struct {
	Mode      types.String `tfsdk:"mode"`
	Hostnames types.Set    `tfsdk:"hostnames"`
	NotBefore types.Int64  `tfsdk:"not_before"`
	NotAfter  types.Int64  `tfsdk:"not_after"`
	UsedBy    types.String `tfsdk:"used_by"`
	Issuer_CN types.String `tfsdk:"issuer_CN"`
	CN        types.String `tfsdk:"CN"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *TLSMaterialStatusResourceTFModel) ToProto(ctx context.Context) (*TLSMaterialStatus, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &TLSMaterialStatus{}
	if !m.Mode.IsNull() && !m.Mode.IsUnknown() {
		r.Mode.UnmarshalText([]byte(m.Mode.ValueString()))
	}
	if diags := m.Hostnames.ElementsAs(ctx, &r.Hostnames, false); diags.HasError() {
		return r, diags
	}
	// TODO(generateTFSDKToProtoField): need to handle type for field NotBefore of external source ("google.golang.org/protobuf/types/known/timestamppb")
	// TODO(generateTFSDKToProtoField): need to handle type for field NotAfter of external source ("google.golang.org/protobuf/types/known/timestamppb")
	if !m.UsedBy.IsNull() && !m.UsedBy.IsUnknown() {
		r.UsedBy = m.UsedBy.ValueString()
	}
	if !m.Issuer_CN.IsNull() && !m.Issuer_CN.IsUnknown() {
		r.Issuer_CN = m.Issuer_CN.ValueString()
	}
	if !m.CN.IsNull() && !m.CN.IsUnknown() {
		r.CN = m.CN.ValueString()
	}
	return r, nil
}

type TLSMaterialFullSpecResourceModel struct {
	Certificate string `tfsdk:"certificate"`
	Chain       string `tfsdk:"chain"`
}

// FromProto imports field values from protobuf message
func (m *TLSMaterialFullSpecResourceModel) FromProto(r *TLSMaterialFullSpec) (err error) {
	m.Certificate = r.GetCertificate()
	m.Chain = r.GetChain()
	// TODO(generateTerraformFromProtoField): need to handle type for field Key of Kind() bytes
	return nil
}

type TLSMaterialFullSpecResourceTFModel struct {
	Certificate types.String `tfsdk:"certificate"`
	Chain       types.String `tfsdk:"chain"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *TLSMaterialFullSpecResourceTFModel) ToProto(ctx context.Context) (*TLSMaterialFullSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &TLSMaterialFullSpec{}
	if !m.Certificate.IsNull() && !m.Certificate.IsUnknown() {
		r.Certificate = m.Certificate.ValueString()
	}
	if !m.Chain.IsNull() && !m.Chain.IsUnknown() {
		r.Chain = m.Chain.ValueString()
	}
	// TODO(generateTFSDKToProtoField): need to handle type for field Key of Kind() bytes
	return r, nil
}

type TLSMaterialFullResourceModel struct {
	Id       string                            `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel   `tfsdk:"metadata"`
	Spec     *TLSMaterialFullSpecResourceModel `tfsdk:"spec"`
	Status   *TLSMaterialStatusResourceModel   `tfsdk:"status"`
}

// FromProto imports field values from protobuf message
func (m *TLSMaterialFullResourceModel) FromProto(r *TLSMaterialFull) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &TLSMaterialFullSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	if r.GetStatus() != nil {
		m.Status = &TLSMaterialStatusResourceModel{}
		if err = m.Status.FromProto(r.GetStatus()); err != nil {
			return err
		}
	}
	return nil
}

type TLSMaterialFullResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
	Status   types.Object `tfsdk:"status"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *TLSMaterialFullResourceTFModel) ToProto(ctx context.Context) (*TLSMaterialFull, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewTLSMaterialFull("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *TLSMaterialFullSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	var status *TLSMaterialStatusResourceTFModel
	if diags := m.Status.As(ctx, &status, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if statusTmp, diags := status.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Status = statusTmp
	}
	return r, nil
}

type TLSManualCreateResourceModel struct {
	Id       string                            `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel   `tfsdk:"metadata"`
	Spec     *TLSManualCreateSpecResourceModel `tfsdk:"spec"`
}

// FromProto imports field values from protobuf message
func (m *TLSManualCreateResourceModel) FromProto(r *TLSManualCreate) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &TLSManualCreateSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	return nil
}

type TLSManualCreateResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *TLSManualCreateResourceTFModel) ToProto(ctx context.Context) (*TLSManualCreate, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewTLSManualCreate("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *TLSManualCreateSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	return r, nil
}

type TLSManualCreateSpecResourceModel struct {
	Certificate string `tfsdk:"certificate"`
	Chain       string `tfsdk:"chain"`
	Key         string `tfsdk:"key"`
}

// FromProto imports field values from protobuf message
func (m *TLSManualCreateSpecResourceModel) FromProto(r *TLSManualCreateSpec) (err error) {
	m.Certificate = r.GetCertificate()
	m.Chain = r.GetChain()
	m.Key = r.GetKey()
	return nil
}

type TLSManualCreateSpecResourceTFModel struct {
	Certificate types.String `tfsdk:"certificate"`
	Chain       types.String `tfsdk:"chain"`
	Key         types.String `tfsdk:"key"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *TLSManualCreateSpecResourceTFModel) ToProto(ctx context.Context) (*TLSManualCreateSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &TLSManualCreateSpec{}
	if !m.Certificate.IsNull() && !m.Certificate.IsUnknown() {
		r.Certificate = m.Certificate.ValueString()
	}
	if !m.Chain.IsNull() && !m.Chain.IsUnknown() {
		r.Chain = m.Chain.ValueString()
	}
	if !m.Key.IsNull() && !m.Key.IsUnknown() {
		r.Key = m.Key.ValueString()
	}
	return r, nil
}

type CleanupOldLEResponseResourceModel struct {
	Deleted []string `tfsdk:"deleted"`
}

// FromProto imports field values from protobuf message
func (m *CleanupOldLEResponseResourceModel) FromProto(r *CleanupOldLEResponse) (err error) {
	m.Deleted = r.GetDeleted()
	return nil
}

type CleanupOldLEResponseResourceTFModel struct {
	Deleted types.Set `tfsdk:"deleted"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *CleanupOldLEResponseResourceTFModel) ToProto(ctx context.Context) (*CleanupOldLEResponse, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &CleanupOldLEResponse{}
	if diags := m.Deleted.ElementsAs(ctx, &r.Deleted, false); diags.HasError() {
		return r, diags
	}
	return r, nil
}

type TLSConfigurationSpecResourceModel struct {
	ProtocolMin string   `tfsdk:"protocol_min"`
	ProtocolMax string   `tfsdk:"protocol_max"`
	Ciphers     []string `tfsdk:"ciphers"`
}

// FromProto imports field values from protobuf message
func (m *TLSConfigurationSpecResourceModel) FromProto(r *TLSConfigurationSpec) (err error) {
	m.ProtocolMin = r.GetProtocolMin().String()
	m.ProtocolMax = r.GetProtocolMax().String()
	m.Ciphers = r.GetCiphers()
	return nil
}

type TLSConfigurationSpecResourceTFModel struct {
	ProtocolMin types.String `tfsdk:"protocol_min"`
	ProtocolMax types.String `tfsdk:"protocol_max"`
	Ciphers     types.Set    `tfsdk:"ciphers"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *TLSConfigurationSpecResourceTFModel) ToProto(ctx context.Context) (*TLSConfigurationSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &TLSConfigurationSpec{}
	if !m.ProtocolMin.IsNull() && !m.ProtocolMin.IsUnknown() {
		r.ProtocolMin.UnmarshalText([]byte(m.ProtocolMin.ValueString()))
	}
	if !m.ProtocolMax.IsNull() && !m.ProtocolMax.IsUnknown() {
		r.ProtocolMax.UnmarshalText([]byte(m.ProtocolMax.ValueString()))
	}
	if diags := m.Ciphers.ElementsAs(ctx, &r.Ciphers, false); diags.HasError() {
		return r, diags
	}
	return r, nil
}

type TLSConfigurationResourceModel struct {
	Id       string                             `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel    `tfsdk:"metadata"`
	Spec     *TLSConfigurationSpecResourceModel `tfsdk:"spec"`
}

// FromProto imports field values from protobuf message
func (m *TLSConfigurationResourceModel) FromProto(r *TLSConfiguration) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &TLSConfigurationSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	return nil
}

type TLSConfigurationResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *TLSConfigurationResourceTFModel) ToProto(ctx context.Context) (*TLSConfiguration, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewTLSConfiguration("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *TLSConfigurationSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	return r, nil
}

type TLSConfigurationDefaultResourceModel struct {
	CiphersAvailable   []string `tfsdk:"ciphers_available"`
	CiphersDefault     []string `tfsdk:"ciphers_default"`
	ProtocolMinDefault string   `tfsdk:"protocol_min_default"`
	ProtocolMaxDefault string   `tfsdk:"protocol_max_default"`
}

// FromProto imports field values from protobuf message
func (m *TLSConfigurationDefaultResourceModel) FromProto(r *TLSConfigurationDefault) (err error) {
	m.CiphersAvailable = r.GetCiphersAvailable()
	m.CiphersDefault = r.GetCiphersDefault()
	m.ProtocolMinDefault = r.GetProtocolMinDefault().String()
	m.ProtocolMaxDefault = r.GetProtocolMaxDefault().String()
	return nil
}

type TLSConfigurationDefaultResourceTFModel struct {
	CiphersAvailable   types.Set    `tfsdk:"ciphers_available"`
	CiphersDefault     types.Set    `tfsdk:"ciphers_default"`
	ProtocolMinDefault types.String `tfsdk:"protocol_min_default"`
	ProtocolMaxDefault types.String `tfsdk:"protocol_max_default"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *TLSConfigurationDefaultResourceTFModel) ToProto(ctx context.Context) (*TLSConfigurationDefault, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &TLSConfigurationDefault{}
	if diags := m.CiphersAvailable.ElementsAs(ctx, &r.CiphersAvailable, false); diags.HasError() {
		return r, diags
	}
	if diags := m.CiphersDefault.ElementsAs(ctx, &r.CiphersDefault, false); diags.HasError() {
		return r, diags
	}
	if !m.ProtocolMinDefault.IsNull() && !m.ProtocolMinDefault.IsUnknown() {
		r.ProtocolMinDefault.UnmarshalText([]byte(m.ProtocolMinDefault.ValueString()))
	}
	if !m.ProtocolMaxDefault.IsNull() && !m.ProtocolMaxDefault.IsUnknown() {
		r.ProtocolMaxDefault.UnmarshalText([]byte(m.ProtocolMaxDefault.ValueString()))
	}
	return r, nil
}

type IPBlacklistSpecResourceModel struct {
	IpAddresses []string `tfsdk:"ip_addresses"`
}

// FromProto imports field values from protobuf message
func (m *IPBlacklistSpecResourceModel) FromProto(r *IPBlacklistSpec) (err error) {
	m.IpAddresses = r.GetIpAddresses()
	return nil
}

type IPBlacklistSpecResourceTFModel struct {
	IpAddresses types.Set `tfsdk:"ip_addresses"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *IPBlacklistSpecResourceTFModel) ToProto(ctx context.Context) (*IPBlacklistSpec, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := &IPBlacklistSpec{}
	if diags := m.IpAddresses.ElementsAs(ctx, &r.IpAddresses, false); diags.HasError() {
		return r, diags
	}
	return r, nil
}

type IPBlacklistResourceModel struct {
	Id       string                          `tfsdk:"id"`
	Metadata *v1beta.ObjectMetaResourceModel `tfsdk:"metadata"`
	Spec     *IPBlacklistSpecResourceModel   `tfsdk:"spec"`
}

// FromProto imports field values from protobuf message
func (m *IPBlacklistResourceModel) FromProto(r *IPBlacklist) (err error) {
	m.Id = r.GetMetadata().GetNamespace() + "/" + r.GetMetadata().GetName()
	if r.GetMetadata() != nil {
		m.Metadata = &v1beta.ObjectMetaResourceModel{}
		if err = m.Metadata.FromProto(r.GetMetadata()); err != nil {
			return err
		}
	}
	if r.GetSpec() != nil {
		m.Spec = &IPBlacklistSpecResourceModel{}
		if err = m.Spec.FromProto(r.GetSpec()); err != nil {
			return err
		}
	}
	return nil
}

type IPBlacklistResourceTFModel struct {
	Id       types.String `tfsdk:"id"`
	Metadata types.Object `tfsdk:"metadata"`
	Spec     types.Object `tfsdk:"spec"`
}

// ToProto converts the model to the corresponding protobuf struct
func (m *IPBlacklistResourceTFModel) ToProto(ctx context.Context) (*IPBlacklist, diag.Diagnostics) {
	if m == nil {
		return nil, nil
	}
	r := NewIPBlacklist("")
	var metadata *v1beta.ObjectMetaResourceTFModel
	if diags := m.Metadata.As(ctx, &metadata, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if metadataTmp, diags := metadata.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Metadata = metadataTmp
	}
	var spec *IPBlacklistSpecResourceTFModel
	if diags := m.Spec.As(ctx, &spec, basetypes.ObjectAsOptions{UnhandledUnknownAsEmpty: true}); diags.HasError() {
		return r, diags
	}
	if specTmp, diags := spec.ToProto(ctx); diags.HasError() {
		return r, diags
	} else {
		r.Spec = specTmp
	}
	return r, nil
}
