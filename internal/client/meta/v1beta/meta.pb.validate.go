// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lib/proto/meta/v1beta/meta.proto

package metav1beta

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TypeMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TypeMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TypeMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TypeMetaMultiError, or nil
// if none found.
func (m *TypeMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *TypeMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_TypeMeta_ApiVersion_Pattern.MatchString(m.GetApiVersion()) {
		err := TypeMetaValidationError{
			field:  "ApiVersion",
			reason: "value does not match regex pattern \"^[[:alnum:].]+/v[0-9]+(beta[0-9]*)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_TypeMeta_Kind_Pattern.MatchString(m.GetKind()) {
		err := TypeMetaValidationError{
			field:  "Kind",
			reason: "value does not match regex pattern \"^[A-Z][A-Za-z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TypeMetaMultiError(errors)
	}

	return nil
}

// TypeMetaMultiError is an error wrapping multiple validation errors returned
// by TypeMeta.ValidateAll() if the designated constraints aren't met.
type TypeMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypeMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypeMetaMultiError) AllErrors() []error { return m }

// TypeMetaValidationError is the validation error returned by
// TypeMeta.Validate if the designated constraints aren't met.
type TypeMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeMetaValidationError) ErrorName() string { return "TypeMetaValidationError" }

// Error satisfies the builtin error interface
func (e TypeMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTypeMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeMetaValidationError{}

var _TypeMeta_ApiVersion_Pattern = regexp.MustCompile("^[[:alnum:].]+/v[0-9]+(beta[0-9]*)?$")

var _TypeMeta_Kind_Pattern = regexp.MustCompile("^[A-Z][A-Za-z]+$")

// Validate checks the field values on ObjectMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ObjectMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ObjectMetaMultiError, or
// nil if none found.
func (m *ObjectMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) > 63 {
		err := ObjectMetaValidationError{
			field:  "Name",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetName()); err != nil {
		err = ObjectMetaValidationError{
			field:  "Name",
			reason: "value must be a valid hostname",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetNamespace() != "" {

		if utf8.RuneCountInString(m.GetNamespace()) > 63 {
			err := ObjectMetaValidationError{
				field:  "Namespace",
				reason: "value length must be at most 63 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateHostname(m.GetNamespace()); err != nil {
			err = ObjectMetaValidationError{
				field:  "Namespace",
				reason: "value must be a valid hostname",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectMetaValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectMetaValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectMetaValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ObjectMetaValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ObjectMetaValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ObjectMetaValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return ObjectMetaMultiError(errors)
	}

	return nil
}

func (m *ObjectMeta) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// ObjectMetaMultiError is an error wrapping multiple validation errors
// returned by ObjectMeta.ValidateAll() if the designated constraints aren't met.
type ObjectMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectMetaMultiError) AllErrors() []error { return m }

// ObjectMetaValidationError is the validation error returned by
// ObjectMeta.Validate if the designated constraints aren't met.
type ObjectMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectMetaValidationError) ErrorName() string { return "ObjectMetaValidationError" }

// Error satisfies the builtin error interface
func (e ObjectMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectMetaValidationError{}

// Validate checks the field values on OrganisationedObjectMeta with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganisationedObjectMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganisationedObjectMeta with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganisationedObjectMetaMultiError, or nil if none found.
func (m *OrganisationedObjectMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganisationedObjectMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) > 63 {
		err := OrganisationedObjectMetaValidationError{
			field:  "Name",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetName()); err != nil {
		err = OrganisationedObjectMetaValidationError{
			field:  "Name",
			reason: "value must be a valid hostname",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrganisation() != "" {

		if utf8.RuneCountInString(m.GetOrganisation()) > 63 {
			err := OrganisationedObjectMetaValidationError{
				field:  "Organisation",
				reason: "value length must be at most 63 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateHostname(m.GetOrganisation()); err != nil {
			err = OrganisationedObjectMetaValidationError{
				field:  "Organisation",
				reason: "value must be a valid hostname",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetCreated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganisationedObjectMetaValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganisationedObjectMetaValidationError{
					field:  "Created",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganisationedObjectMetaValidationError{
				field:  "Created",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdated()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganisationedObjectMetaValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganisationedObjectMetaValidationError{
					field:  "Updated",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdated()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganisationedObjectMetaValidationError{
				field:  "Updated",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Version

	if len(errors) > 0 {
		return OrganisationedObjectMetaMultiError(errors)
	}

	return nil
}

func (m *OrganisationedObjectMeta) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// OrganisationedObjectMetaMultiError is an error wrapping multiple validation
// errors returned by OrganisationedObjectMeta.ValidateAll() if the designated
// constraints aren't met.
type OrganisationedObjectMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganisationedObjectMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganisationedObjectMetaMultiError) AllErrors() []error { return m }

// OrganisationedObjectMetaValidationError is the validation error returned by
// OrganisationedObjectMeta.Validate if the designated constraints aren't met.
type OrganisationedObjectMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganisationedObjectMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganisationedObjectMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganisationedObjectMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganisationedObjectMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganisationedObjectMetaValidationError) ErrorName() string {
	return "OrganisationedObjectMetaValidationError"
}

// Error satisfies the builtin error interface
func (e OrganisationedObjectMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganisationedObjectMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganisationedObjectMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganisationedObjectMetaValidationError{}

// Validate checks the field values on ListMeta with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListMeta) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMeta with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListMetaMultiError, or nil
// if none found.
func (m *ListMeta) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMeta) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListMetaMultiError(errors)
	}

	return nil
}

// ListMetaMultiError is an error wrapping multiple validation errors returned
// by ListMeta.ValidateAll() if the designated constraints aren't met.
type ListMetaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMetaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMetaMultiError) AllErrors() []error { return m }

// ListMetaValidationError is the validation error returned by
// ListMeta.Validate if the designated constraints aren't met.
type ListMetaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMetaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMetaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMetaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMetaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMetaValidationError) ErrorName() string { return "ListMetaValidationError" }

// Error satisfies the builtin error interface
func (e ListMetaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMeta.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMetaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMetaValidationError{}

// Validate checks the field values on UnstructuredObject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnstructuredObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnstructuredObject with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnstructuredObjectMultiError, or nil if none found.
func (m *UnstructuredObject) ValidateAll() error {
	return m.validate(true)
}

func (m *UnstructuredObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_UnstructuredObject_ApiVersion_Pattern.MatchString(m.GetApiVersion()) {
		err := UnstructuredObjectValidationError{
			field:  "ApiVersion",
			reason: "value does not match regex pattern \"^[[:alnum:].]+/v[0-9]+(beta[0-9]*)?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_UnstructuredObject_Kind_Pattern.MatchString(m.GetKind()) {
		err := UnstructuredObjectValidationError{
			field:  "Kind",
			reason: "value does not match regex pattern \"^[A-Z][A-Za-z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMetadata() == nil {
		err := UnstructuredObjectValidationError{
			field:  "Metadata",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UnstructuredObjectValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UnstructuredObjectValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnstructuredObjectValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UnstructuredObjectMultiError(errors)
	}

	return nil
}

// UnstructuredObjectMultiError is an error wrapping multiple validation errors
// returned by UnstructuredObject.ValidateAll() if the designated constraints
// aren't met.
type UnstructuredObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnstructuredObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnstructuredObjectMultiError) AllErrors() []error { return m }

// UnstructuredObjectValidationError is the validation error returned by
// UnstructuredObject.Validate if the designated constraints aren't met.
type UnstructuredObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnstructuredObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnstructuredObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnstructuredObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnstructuredObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnstructuredObjectValidationError) ErrorName() string {
	return "UnstructuredObjectValidationError"
}

// Error satisfies the builtin error interface
func (e UnstructuredObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnstructuredObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnstructuredObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnstructuredObjectValidationError{}

var _UnstructuredObject_ApiVersion_Pattern = regexp.MustCompile("^[[:alnum:].]+/v[0-9]+(beta[0-9]*)?$")

var _UnstructuredObject_Kind_Pattern = regexp.MustCompile("^[A-Z][A-Za-z]+$")

// Validate checks the field values on WatchEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WatchEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WatchEventMultiError, or
// nil if none found.
func (m *WatchEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Object

	// no validation rules for Prev

	if len(errors) > 0 {
		return WatchEventMultiError(errors)
	}

	return nil
}

// WatchEventMultiError is an error wrapping multiple validation errors
// returned by WatchEvent.ValidateAll() if the designated constraints aren't met.
type WatchEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchEventMultiError) AllErrors() []error { return m }

// WatchEventValidationError is the validation error returned by
// WatchEvent.Validate if the designated constraints aren't met.
type WatchEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchEventValidationError) ErrorName() string { return "WatchEventValidationError" }

// Error satisfies the builtin error interface
func (e WatchEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchEventValidationError{}

// Validate checks the field values on ListOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListOptionsMultiError, or
// nil if none found.
func (m *ListOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNamespace() != "" {

		if utf8.RuneCountInString(m.GetNamespace()) > 63 {
			err := ListOptionsValidationError{
				field:  "Namespace",
				reason: "value length must be at most 63 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateHostname(m.GetNamespace()); err != nil {
			err = ListOptionsValidationError{
				field:  "Namespace",
				reason: "value must be a valid hostname",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListOptionsMultiError(errors)
	}

	return nil
}

func (m *ListOptions) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// ListOptionsMultiError is an error wrapping multiple validation errors
// returned by ListOptions.ValidateAll() if the designated constraints aren't met.
type ListOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOptionsMultiError) AllErrors() []error { return m }

// ListOptionsValidationError is the validation error returned by
// ListOptions.Validate if the designated constraints aren't met.
type ListOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOptionsValidationError) ErrorName() string { return "ListOptionsValidationError" }

// Error satisfies the builtin error interface
func (e ListOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOptionsValidationError{}

// Validate checks the field values on GetOptions with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOptionsMultiError, or
// nil if none found.
func (m *GetOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNamespace() != "" {

		if utf8.RuneCountInString(m.GetNamespace()) > 63 {
			err := GetOptionsValidationError{
				field:  "Namespace",
				reason: "value length must be at most 63 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateHostname(m.GetNamespace()); err != nil {
			err = GetOptionsValidationError{
				field:  "Namespace",
				reason: "value must be a valid hostname",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetName()) > 63 {
		err := GetOptionsValidationError{
			field:  "Name",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetName()); err != nil {
		err = GetOptionsValidationError{
			field:  "Name",
			reason: "value must be a valid hostname",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOptionsMultiError(errors)
	}

	return nil
}

func (m *GetOptions) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// GetOptionsMultiError is an error wrapping multiple validation errors
// returned by GetOptions.ValidateAll() if the designated constraints aren't met.
type GetOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOptionsMultiError) AllErrors() []error { return m }

// GetOptionsValidationError is the validation error returned by
// GetOptions.Validate if the designated constraints aren't met.
type GetOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOptionsValidationError) ErrorName() string { return "GetOptionsValidationError" }

// Error satisfies the builtin error interface
func (e GetOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOptionsValidationError{}

// Validate checks the field values on PatchOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PatchOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PatchOptionsMultiError, or
// nil if none found.
func (m *PatchOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNamespace() != "" {

		if utf8.RuneCountInString(m.GetNamespace()) > 63 {
			err := PatchOptionsValidationError{
				field:  "Namespace",
				reason: "value length must be at most 63 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateHostname(m.GetNamespace()); err != nil {
			err = PatchOptionsValidationError{
				field:  "Namespace",
				reason: "value must be a valid hostname",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetName()) > 63 {
		err := PatchOptionsValidationError{
			field:  "Name",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetName()); err != nil {
		err = PatchOptionsValidationError{
			field:  "Name",
			reason: "value must be a valid hostname",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchOptionsValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchOptionsValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchOptionsValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchOptionsValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchOptionsValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchOptionsValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchOptionsMultiError(errors)
	}

	return nil
}

func (m *PatchOptions) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// PatchOptionsMultiError is an error wrapping multiple validation errors
// returned by PatchOptions.ValidateAll() if the designated constraints aren't met.
type PatchOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchOptionsMultiError) AllErrors() []error { return m }

// PatchOptionsValidationError is the validation error returned by
// PatchOptions.Validate if the designated constraints aren't met.
type PatchOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchOptionsValidationError) ErrorName() string { return "PatchOptionsValidationError" }

// Error satisfies the builtin error interface
func (e PatchOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchOptionsValidationError{}

// Validate checks the field values on DeleteOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteOptionsMultiError, or
// nil if none found.
func (m *DeleteOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNamespace() != "" {

		if utf8.RuneCountInString(m.GetNamespace()) > 63 {
			err := DeleteOptionsValidationError{
				field:  "Namespace",
				reason: "value length must be at most 63 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateHostname(m.GetNamespace()); err != nil {
			err = DeleteOptionsValidationError{
				field:  "Namespace",
				reason: "value must be a valid hostname",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if utf8.RuneCountInString(m.GetName()) > 63 {
		err := DeleteOptionsValidationError{
			field:  "Name",
			reason: "value length must be at most 63 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetName()); err != nil {
		err = DeleteOptionsValidationError{
			field:  "Name",
			reason: "value must be a valid hostname",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOptionsMultiError(errors)
	}

	return nil
}

func (m *DeleteOptions) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// DeleteOptionsMultiError is an error wrapping multiple validation errors
// returned by DeleteOptions.ValidateAll() if the designated constraints
// aren't met.
type DeleteOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOptionsMultiError) AllErrors() []error { return m }

// DeleteOptionsValidationError is the validation error returned by
// DeleteOptions.Validate if the designated constraints aren't met.
type DeleteOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOptionsValidationError) ErrorName() string { return "DeleteOptionsValidationError" }

// Error satisfies the builtin error interface
func (e DeleteOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOptionsValidationError{}

// Validate checks the field values on WatchOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WatchOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WatchOptionsMultiError, or
// nil if none found.
func (m *WatchOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetNamespace() != "" {

		if utf8.RuneCountInString(m.GetNamespace()) > 63 {
			err := WatchOptionsValidationError{
				field:  "Namespace",
				reason: "value length must be at most 63 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateHostname(m.GetNamespace()); err != nil {
			err = WatchOptionsValidationError{
				field:  "Namespace",
				reason: "value must be a valid hostname",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetName() != "" {

		if utf8.RuneCountInString(m.GetName()) > 63 {
			err := WatchOptionsValidationError{
				field:  "Name",
				reason: "value length must be at most 63 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateHostname(m.GetName()); err != nil {
			err = WatchOptionsValidationError{
				field:  "Name",
				reason: "value must be a valid hostname",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return WatchOptionsMultiError(errors)
	}

	return nil
}

func (m *WatchOptions) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// WatchOptionsMultiError is an error wrapping multiple validation errors
// returned by WatchOptions.ValidateAll() if the designated constraints aren't met.
type WatchOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchOptionsMultiError) AllErrors() []error { return m }

// WatchOptionsValidationError is the validation error returned by
// WatchOptions.Validate if the designated constraints aren't met.
type WatchOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchOptionsValidationError) ErrorName() string { return "WatchOptionsValidationError" }

// Error satisfies the builtin error interface
func (e WatchOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchOptionsValidationError{}
